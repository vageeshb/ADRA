#! /bin/bash
### BEGIN INIT INFO
# Provides:          adra_s
# Required-Start:    $remote_fs $syslog
# Required-Stop:     $remote_fs $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Script to launch ROS nodes for surveillance copter
# Description:       This script can be used to start the surveillance copter
#			and requires PX4 and USB Camera to be connected.
### END INIT INFO

# Author: Vageesh Bhasin <vageesh.bhasin@asu.edu>

# Do NOT "set -e"

# PATH should only include /usr/* if it runs after the mountnfs.sh script
PATH=/sbin:/usr/sbin:/bin:/usr/bin
DESC="Start the ROS Process for Surveillance Copter"
NAME=adra_s_copter
PIDFILE=/var/run/$NAME.pid
SCRIPTNAME=/etc/init.d/$NAME

# Read configuration variable file if it is present
[ -r /etc/default/$NAME ] && . /etc/default/$NAME

# Load the VERBOSE setting and other rcS variables
. /lib/init/vars.sh

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.2-14) to ensure that this file is present
# and status_of_proc is working.
. /lib/lsb/init-functions

#
# Function that starts the service
#
do_start()
{
	# Source the variables
	source /home/odroid/catkin_ws/devel/setup.bash
	
	# Export MASTER URI Variable
	export ROS_MASTER_URI=http://192.168.2.2:11311
	
	# Export SELF URI	
	export ROS_IP=`hostname -I`

	# Launch ROS nodes
	roslaunch /home/odroid/catkin_ws/src/adra_s/launch/base.launch 
}

#
# Function that stops the service
#
do_stop()
{
	# Kill ros nodes
	source /home/odroid/catkin_ws/devel/setup.bash
	export ROS_MASTER_URI=http://192.168.2.2:11311
	export ROS_IP=`hostname -I`
	rosnode kill mavros uvc_cam 
	return $?
}

case "$1" in
  start)
	[ "$VERBOSE" != no ] && echo "Starting $DESC" "$NAME"
	do_start
	case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
	;;
  stop)
	[ "$VERBOSE" != no ] && echo "Stopping $DESC" "$NAME"
	do_stop
	case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
	;;
  status)
	# status_of_proc "$NAME" && exit 0 || exit $?
	if ps aux | grep "$NAME" |grep -v grep > /dev/null; then
	    echo "$NAME is running, everything is fine"
	else
	    echo "$NAME is not running"
	fi
	;;
  #reload|force-reload)
	#
	# If do_reload() is not implemented then leave this commented out
	# and leave 'force-reload' as an alias for 'restart'.
	#
	#log_daemon_msg "Reloading $DESC" "$NAME"
	#do_reload
	#log_end_msg $?
	#;;
  restart|force-reload)
	#
	# If the "reload" option is implemented then remove the
	# 'force-reload' alias
	#
	log_daemon_msg "Restarting $DESC" "$NAME"
	do_stop
	case "$?" in
	  0|1)
		do_start
		case "$?" in
			0) log_end_msg 0 ;;
			1) log_end_msg 1 ;; # Old process is still running
			*) log_end_msg 1 ;; # Failed to start
		esac
		;;
	  *)
		# Failed to stop
		log_end_msg 1
		;;
	esac
	;;
  *)
	#echo "Usage: $SCRIPTNAME {start|stop|restart|reload|force-reload}" >&2
	echo "Usage: $SCRIPTNAME {start|stop|status|restart|force-reload}" >&2
	exit 3
	;;
esac

:
